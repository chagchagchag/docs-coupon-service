{"/":{"title":"Introduction","data":{"":"Project Github : https://github.com/chagchagchag/coupon-service\nDocs Github : https://github.com/chagchagchag/docs-coupon-service"}},"/project-overview/locust-setting":{"title":"Locust Setting","data":{"locust-세팅하기#locust 세팅하기":"locust 는 성능부하를 테스트하기 위한 테스트입니다. docker-compose 등을 통해 스케일링이 가능하고, 기본으로 제공하는 dashboard 도 강력하기에 성능부하를 실험하고, 측정하기에 용이한 도구입니다.","참고#참고":"locust.io\ndocs.locust.io/en/stable","api-정의#API 정의":"테스트할 API 를 정의합니다.\n@RequiredArgsConstructor\r\n@RestController\r\npublic class CouponApiController {\r\n\r\n    private final CouponApplicationService couponApplicationService;\r\n\r\n    @PostMapping(\"/coupon/issue\")\r\n    public CouponIssueResponse issue(@RequestBody CouponIssueRequest request){\r\n        couponApplicationService.issueAsync(request);\r\n        return new CouponIssueResponse(SUCCESS, SUCCESS.getMessageKr());\r\n    }\r\n\r\n}\n위의 코드에서 CouponApplicationService 클래스 내의 issueAsync(request) 메서드는 아무 동작도 하지 않는 비어있는 메서드입니다.","docker-compose#docker-compose":"docker-compose 파일을 아래와 같이 작성해줍니다.\nversion: '3.7'\r\nservices:\r\n  master:\r\n    image: locustio/locust\r\n    ports:\r\n      - \"8089:8089\"\r\n    volumes:\r\n      - ./:/mnt/locust\r\n    command: -f /mnt/locust/locustfile-coupon-request.py --master -H http://host.docker.internal:8080\r\n\r\n  worker:\r\n    image: locustio/locust\r\n    volumes:\r\n      - ./:/mnt/locust\r\n    command: -f /mnt/locust/locustfile-coupon-request.py --worker --master-host master","python-파일-정의#python 파일 정의":"import random\r\nfrom locust import task, FastHttpUser, stats\r\n\r\nstats.PERCENTILES_TO_CHART = [0.95, 0.99]\r\n\r\n\r\nclass CouponRequest(FastHttpUser):\r\n    connection_timeout = 10.0\r\n    network_timeout = 10.0\r\n\r\n    @task\r\n    def issue(self):\r\n        payload = {\r\n            \"userId\": random.randint(1, 10000000),\r\n            \"couponId\": 1\r\n        }\r\n        with self.rest(\"POST\", \"/coupon/issue\", json=payload):\r\n            pass","실행#실행":"아래의 명령어를 통해 실행합니다.\ndocker-compose up -d --scale worker=3","docker-desktop-확인#Docker Desktop 확인":"아래와 같이 worker 3기, master 1의 구성으로 docker 애플리케이션이 구동된 모습을 확인 가능합니다.","locust-애플리케이션-접속#locust 애플리케이션 접속":"","load-설정#load 설정":"Number of users\n몇명의 사용자까지 만들어낼 것인지\n위의 사진에서는 10만명까지의 유입을 만들어내겠다는 의미\nSpawn rate\n1초에 몇명의 사용자를 생성해낼 것인지\n위의 사진에서는 1초에 1000명씩 유저를 생성되어서 유입되게끔 했습니다.\n1초: 1000명, 2초: 2000명, 3초: 3000명, ... 100초 : 100000명\nHost\n요청을 보낼 주소","load-테스트#load 테스트":"로드를 spawning 하고 있는 모습\r\n차트 탭\r\nFailures 탭\r\n요청이 실패한 것의 기록이다.\r\n이번에는 Workers 탭으로 이동한다. 자세히 보면 CPU 사용률이 100% 이상으로 올라가고 있다.\r\nworker 들의 로드를 줄여주기 위해 이번에는 worker 수를 7개로 늘려봅니다.\n$ docker-compose scale worker=7\n각 worker 의 cpu 사용량은 줄어들었습니다."}},"/project-overview/module-structure":{"title":"멀티 모듈 구조","data":{"":"coupon-core\nDomainEvent, ExceptionCode\ncoupon-api\n예를 들어 쿠폰 1개에 대해 10000 명의 사용자에게 발급한다고 할 때 발급에 대한 동시성 처리를 요청들을 레디스에 저장해두는 Write Back 방식의 캐시 지연 처리를 할 수 있도록 하는 기능\ncontroller, advice\nredis enqueue\nRedisScript\ncoupon-assigner\nRedis 에 저장된 요청을 꺼내어서 MySQL에 저장하는 작업. 스케쥴링(@Scheduled) 기반의 데이터 배치 저장 처리\n데이터 저장 작업 완료시 UserAssignedNewCouponEvent 라는 도메인 이벤트 발급(publish)\n@TransactionalEventListener 를 통해 트랜잭션 커밋이 완료된 couponId 를 Redis 내에 저장\netc\ncoupon-assigner 의 경우 적당한 이름을 찾지 못해서 coupon-assigner 라는 이름을 지어줬는데, 적당한 이름을 찾을 경우 모듈 명을 변경하고, 적당한 이름을 찾지 못하면 지금까지와 같이 coupon-assigner 로 진행 예정"}},"/project-overview/tech-stack":{"title":"Tech Stack","data":{"library#Library":"Spring Boot 3.2.2\nGradle Kotlin DSL\nLanguage : Java 21\nSpring Data JPA, Querydsl\nGradle Jib","infra#Infra":"Docker, Docker Compose\nRedis\nMySQL"}},"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}}}