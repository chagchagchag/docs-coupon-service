{"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/":{"title":"Introduction","data":{"":"Project Github : https://github.com/chagchagchag/coupon-service\nDocs Github : https://github.com/chagchagchag/docs-coupon-service"}},"/project-overview/prometheus-grafana-setting":{"title":"Prometheus Grafana Setting","data":{"prometheus-grafana-세팅#prometheus, grafana 세팅":"Prometheus 를 통해 애플리케이션이 모니터링 가능하도록 하고, Grafana 로 모니터링하는 과정을 설명합니다.\r\n이론적인 내용이나 개념도 설명할까 했는데, 피곤해서 거기까지는 설명을 못하고 어떻게 하는지만 설명을 남겨두기로 했습니다.","coupon-api#coupon-api":"","buildgradlekts#build.gradle.kts":"spring-boot-starter-actuator, micrometer-registry-prometheus 를 의존성으로 추가해줍니다.\n// ...\r\n\r\ndependencies {\r\n    // ...\r\n\r\n    // prometheus\r\n\timplementation(\"org.springframework.boot:spring-boot-starter-actuator\")\r\n\timplementation(\"io.micrometer:micrometer-registry-prometheus\")\r\n\r\n    // ...\r\n}","application-apiyml#application-api.yml":"application-api.yml 파일에 spring.application.name, server.tomcat.mbeanregistry.enabled, management.metrics.tags.application, management.endpoints.web.exposure.include = prometheus를 추가해줍니다.\nspring:\r\n  application:\r\n    name: coupon-api\r\n\r\n# ...\r\n# ...\r\n\r\nserver:\r\n  port: 8080\r\n  tomcat:\r\n    mbeanregistry:\r\n      enabled: true\r\nmanagement:\r\n  metrics:\r\n    tags:\r\n      application:\r\n        ${spring.application.name}\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: prometheus","coupon-issuer#coupon-issuer":"이번에는 coupon-issuer 측의 설정입니다.","buildgradlekts-1#build.gradle.kts":"spring-boot-starter-actuator, micrometer-registry-prometheus 를 의존성으로 추가해줍니다.\n// ...\r\n\r\ndependencies {\r\n    // ...\r\n\r\n    // prometheus\r\n\timplementation(\"org.springframework.boot:spring-boot-starter-actuator\")\r\n\timplementation(\"io.micrometer:micrometer-registry-prometheus\")\r\n\r\n    // ...\r\n}","application-issueryml#application-issuer.yml":"application-issuer.yml 파일에 spring.application.name, server.tomcat.mbeanregistry.enabled, management.metrics.tags.application, management.endpoints.web.exposure.include = prometheus를 추가해줍니다.\nspring:\r\n  application:\r\n    name: coupon-issuer\r\n\r\n# ...\r\n# ...\r\n\r\nserver:\r\n  port: 8081 # 8081 포트를 사용합니다. 주의해주세요.\r\n  tomcat:\r\n    mbeanregistry:\r\n      enabled: true\r\nmanagement:\r\n  metrics:\r\n    tags:\r\n      application:\r\n        ${spring.application.name}\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: prometheus","coupon-api-coupon-issuer-모듈-구동#coupon-api, coupon-issuer 모듈 구동":"coupon-api, coupon-issuer 모듈을 각각 스프링부트 애플리케이션으로 구동합니다. 각각 8080, 8081 포트에 구동됩니다.","prometheus-메트릭-조회-가능-여부-확인#prometheus 메트릭 조회 가능 여부 확인":"간단하게 coupon-api 측에서의 접근이 가능한지를 확인해봅니다.\r\nhttp://host.docker.internal:8080/actuator/prometheus 으로 접속해주세요. 만약 docker 에서 prometheus 를 띄우지 않고 로컬호스트에서 prometheus 를 구동했다면 http://localhost:8080/actuator/prometheus으로 접속하시면 됩니다.\n아래와 같이 메트릭 조회가 성공적으로 되어야 합니다. 비정상일 경우 White Label Error Page 오류가 나타납니다.\r\ncoupon-issuer 에 대해서도 같은 방식으로 동작을 확인해보시기 바랍니다.","docker-compose-prometheus-grafana-세팅#Docker-Compose Prometheus, Grafana 세팅":"","monitoringprometheusconfigconfigyml#monitoring/prometheus/config/config.yml":"0.performance-test/monitoring/prometheus/config/config.yml 을 아래와 같이 작성합니다.\nglobal:\r\n  scrape_interval: 5s\r\n\r\nscrape_configs:\r\n  - job_name: \"coupon-api\"\r\n    metrics_path: '/actuator/prometheus'\r\n    static_configs:\r\n      - targets: [ 'host.docker.internal:8080' ]\r\n  - job_name: \"coupon-issuer\"\r\n    metrics_path: '/actuator/prometheus'\r\n    static_configs:\r\n      - targets: [ 'host.docker.internal:8081' ]","docker-composeyml#docker-compose.yml":"0.performance-test/monitoring/docker-compose.yml 을 아래와 같이 작성합니다.\nversion: '3.7'\r\nservices:\r\n  prometheus:\r\n    image: prom/prometheus\r\n    container_name: prometheus\r\n    volumes:\r\n      - ./prometheus/config:/etc/prometheus\r\n      - ./prometheus/volume:/prometheus\r\n    ports:\r\n      - 9090:9090\r\n    command:\r\n      - '--config.file=/etc/prometheus/config.yml'\r\n    restart: always\r\n    networks:\r\n      - prometheus_network\r\n  grafana:\r\n    image: grafana/grafana\r\n    container_name: grafana\r\n    ports:\r\n      - 3000:3000\r\n    volumes:\r\n      - ./grafana/volume:/var/lib/grafana\r\n    restart: always\r\n    networks:\r\n      - prometheus_network\r\nnetworks:\r\n  prometheus_network:\r\n    driver: bridge\n작성이 완료되었으면 터미널에서 0.performance-test/monitoring/ 으로 이동 후에 아래의 명령어를 수행합니다.\ndocker-compose up -d","grafana-세팅#Grafana 세팅":"이번에는 Grafana 에서 Prometheus 를 설정하는 방식을 알아봅니다.","grafana-접속--패스워드-변경#Grafana 접속 & 패스워드 변경":"Grafana 에 접속합니다. 접속 주소는 http://localhost:3000 입니다.\r\nid = admin, password = admin 을 입력하고 접속합니다.\r\n비밀번호를 변경하는 페이지입니다. 비밀번호를 변경하기 귀찮다면 Skip 버튼을 클릭하고, 변경할 것이라면 New password, Confirm new password 를 모두 입력하고 Submit 버튼을 눌러서 비밀번호 변경을 완료합니다.","dashboard-생성-prometheus-세팅#Dashboard 생성, Prometheus 세팅":"새로 나타난 페이지에서는 Dashboard > Create your first dashboard 를 클릭해서 대시보드 설정 페이지로 이동합니다.\r\nImport a dashboard 를 클릭합니다.\r\n새로 나타난 페이지에서 4701 을 입력하고 Load 버튼을 클릭합니다.\r\nConfigure a new datasource 버튼을 클릭합니다.\r\n나타난 datasource 선택 화면에서 Prometheus 를 선택합니다.\r\nPrometheus URL 은 http://host.docker.internal:9090 을 입력해줍니다.\r\n스크롤을 아래로 내려서 Save & test 버튼을 클릭해서 Prometheus 설정을 마무리합니다.\r\n다시 홈으로 이동 후  Dashboard > Create your first dashboard 를 클릭해서 대시보드 설정 페이지로 이동합니다.\r\n그리고 Import a dashboard 를 클릭합니다.\r\nprometheus 를 선택하고 Import 버튼을 클릭합니다.\r\n설정이 완료되면 아래와 같은 화면이 나타납니다."}},"/project-overview/module-structure":{"title":"멀티 모듈 구조","data":{"":"coupon-core\nDomainEvent, ExceptionCode\ncoupon-api\n예를 들어 쿠폰 1개에 대해 10000 명의 사용자에게 발급한다고 할 때 발급에 대한 동시성 처리를 요청들을 레디스에 저장해두는 Write Back 방식의 캐시 지연 처리를 할 수 있도록 하는 기능\ncontroller, advice\nredis enqueue\nRedisScript\ncoupon-assigner\nRedis 에 저장된 요청을 꺼내어서 MySQL에 저장하는 작업. 스케쥴링(@Scheduled) 기반의 데이터 배치 저장 처리\n데이터 저장 작업 완료시 UserAssignedNewCouponEvent 라는 도메인 이벤트 발급(publish)\n@TransactionalEventListener 를 통해 트랜잭션 커밋이 완료된 couponId 를 Redis 내에 저장\netc\ncoupon-assigner 의 경우 적당한 이름을 찾지 못해서 coupon-assigner 라는 이름을 지어줬는데, 적당한 이름을 찾을 경우 모듈 명을 변경하고, 적당한 이름을 찾지 못하면 지금까지와 같이 coupon-assigner 로 진행 예정"}},"/project-overview/tech-stack":{"title":"Tech Stack","data":{"library#Library":"Spring Boot 3.2.2\nGradle Kotlin DSL\nLanguage : Java 21\nSpring Data JPA, Querydsl\nGradle Jib","infra#Infra":"Docker, Docker Compose\nRedis\nMySQL"}},"/project-overview/locust-setting":{"title":"Locust Setting","data":{"locust-세팅하기#locust 세팅하기":"locust 는 성능부하를 테스트하기 위한 테스트입니다. docker-compose 등을 통해 스케일링이 가능하고, 기본으로 제공하는 dashboard 도 강력하기에 성능부하를 실험하고, 측정하기에 용이한 도구입니다.","참고#참고":"locust.io\ndocs.locust.io/en/stable","api-정의#API 정의":"테스트할 API 를 정의합니다.\n@RequiredArgsConstructor\r\n@RestController\r\npublic class CouponApiController {\r\n\r\n    private final CouponApplicationService couponApplicationService;\r\n\r\n    @PostMapping(\"/coupon/issue\")\r\n    public CouponIssueResponse issue(@RequestBody CouponIssueRequest request){\r\n        couponApplicationService.issueAsync(request);\r\n        return new CouponIssueResponse(SUCCESS, SUCCESS.getMessageKr());\r\n    }\r\n\r\n}\n위의 코드에서 CouponApplicationService 클래스 내의 issueAsync(request) 메서드는 아무 동작도 하지 않는 비어있는 메서드입니다.","docker-compose#docker-compose":"docker-compose 파일을 아래와 같이 작성해줍니다.\nversion: '3.7'\r\nservices:\r\n  master:\r\n    image: locustio/locust\r\n    ports:\r\n      - \"8089:8089\"\r\n    volumes:\r\n      - ./:/mnt/locust\r\n    command: -f /mnt/locust/locustfile-coupon-request.py --master -H http://host.docker.internal:8080\r\n\r\n  worker:\r\n    image: locustio/locust\r\n    volumes:\r\n      - ./:/mnt/locust\r\n    command: -f /mnt/locust/locustfile-coupon-request.py --worker --master-host master","python-파일-정의#python 파일 정의":"import random\r\nfrom locust import task, FastHttpUser, stats\r\n\r\nstats.PERCENTILES_TO_CHART = [0.95, 0.99]\r\n\r\n\r\nclass CouponRequest(FastHttpUser):\r\n    connection_timeout = 10.0\r\n    network_timeout = 10.0\r\n\r\n    @task\r\n    def issue(self):\r\n        payload = {\r\n            \"userId\": random.randint(1, 10000000),\r\n            \"couponId\": 1\r\n        }\r\n        with self.rest(\"POST\", \"/coupon/issue\", json=payload):\r\n            pass","실행#실행":"아래의 명령어를 통해 실행합니다.\ndocker-compose up -d --scale worker=3","docker-desktop-확인#Docker Desktop 확인":"아래와 같이 worker 3기, master 1의 구성으로 docker 애플리케이션이 구동된 모습을 확인 가능합니다.","locust-애플리케이션-접속#locust 애플리케이션 접속":"","load-설정#load 설정":"Number of users\n몇명의 사용자까지 만들어낼 것인지\n위의 사진에서는 10만명까지의 유입을 만들어내겠다는 의미\nSpawn rate\n1초에 몇명의 사용자를 생성해낼 것인지\n위의 사진에서는 1초에 1000명씩 유저를 생성되어서 유입되게끔 했습니다.\n1초: 1000명, 2초: 2000명, 3초: 3000명, ... 100초 : 100000명\nHost\n요청을 보낼 주소","load-테스트#load 테스트":"로드를 spawning 하고 있는 모습\r\n차트 탭\r\nFailures 탭\r\n요청이 실패한 것의 기록이다.\r\n이번에는 Workers 탭으로 이동한다. 자세히 보면 CPU 사용률이 100% 이상으로 올라가고 있다.\r\nworker 들의 로드를 줄여주기 위해 이번에는 worker 수를 7개로 늘려봅니다.\n$ docker-compose scale worker=7\n각 worker 의 cpu 사용량은 줄어들었습니다."}}}